#!@GUILE@ \
-e main
!#

;;; dsv.in -- Get various information from DSV files.

;; Copyright (C) 2015, 2016, 2017, 2020, 2021 Artyom V. Poptsov <poptsov.artyom@gmail.com>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; The program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with the program.  If not, see <http://www.gnu.org/licenses/>.


;;; Commentary:

;; A handy tool to get various information from DSV files.
;;
;; Configurable table elements:
;;   - top (t)
;;   - top-left (tl)
;;   - top-right (tr)
;;   - top-joint (tj)
;;   - horizontal (h)
;;   - horizontal-left (hl)
;;   - horizontal-right (hr)
;;   - horizontal-joint (hj)
;;   - vertical (v)
;;   - bottom (b)
;;   - bottom-left (bl)
;;   - bottom-right (br)
;;   - bottom-joint (bj)


;;; Code:

(use-modules (ice-9 getopt-long)
             (ice-9 rdelim)
             (ice-9 format)
             (ice-9 textual-ports)
             (ice-9 regex)
             (srfi  srfi-1)
             (srfi  srfi-26)
             (dsv)
             (dsv common))



(define %table-parameters
  '((t   . top)
    (tl  . top-left)
    (tr  . top-right)
    (tj  . top-joint)
    (h   . horizontal)
    (hl  . horizontal-left)
    (hr  . horizontal-right)
    (hj  . horizontal-joint)
    (j   . horizontal-joint)
    (v   . vertical)
    (b   . bottom)
    (bl  . bottom-left)
    (br  . bottom-right)
    (bj  . bottom-joint)))



(define (string->dsv-format str)
  "Convert a string STR to a DSV format type."
  (let ((fmt (string->symbol str)))
    (case fmt
      ((unix rfc4180)
       fmt)
      (else
       (error "Wrong format" str)))))

(define (remove-empty-rows table)
  (remove (lambda (f)
            (and (= (length f) 1)
                 (string-null? (car f))))
          table))

(define (rc file delim fmt)
  "Get number of records in a FILE."
  (let ((p (open-input-file file)))
    (length (dsv->scm p delim #:format fmt))))


(define (guess-file-delimiter input-port fmt)
  "Guess delimiter for a file."
  (let guess ((line (read-line input-port 'concat))
              (buf  '()))
    (and (not (eof-object? line))
         (let ((guessed-delim (guess-delimiter line #:format fmt)))
           (if guessed-delim
               (begin
                 (for-each (lambda (str)
                             (unget-string input-port str))
                           (cons line buf))
                 guessed-delim)
               (guess (read-line input-port)
                      (cons line buf)))))))


(define (get-width table)
  "Get maximum field width for each row of TABLE."
  (let loop ((rows table)
             (res  '()))
    (if (not (null? rows))
        (let ((w (map string-length (car rows))))
          (cond
           ((null? res)
            (loop (cdr rows) w))
           (else
            (loop (cdr rows)
                  (map max res w)))))
        res)))

(define (format-table table borders)
  "Format file and print it."
  (let* ((padding 5)
         (vborder          (or (assoc-ref borders 'vertical) ""))
         (hborder          (assoc-ref borders 'horizontal))
         (joint            (assoc-ref borders 'horizontal-joint))
         (top              (or (assoc-ref borders 'top)
                               hborder))
         (top-left         (or (assoc-ref borders 'top-left)
                               joint))
         (top-right        (or (assoc-ref borders 'top-right)
                               joint))
         (top-joint        (or (assoc-ref borders 'top-joint)
                               joint))
         (horizontal-left  (or (assoc-ref borders 'horizontal-left)
                               vborder))
         (horizontal-right (or (assoc-ref borders 'horizontal-right)
                               vborder))
         (horizontal-joint (or (assoc-ref borders 'horizontal-joint)
                               joint))
         (bottom           (or (assoc-ref borders 'bottom)
                               top))
         (bottom-left      (or (assoc-ref borders 'bottom-left)
                               joint))
         (bottom-right     (or (assoc-ref borders 'bottom-right)
                               joint))
         (bottom-joint     (or (assoc-ref borders 'bottom-joint)
                               joint))
         (width        (get-width table))
         (format-field (lambda (field width)
                         "Print a FIELD in a column with given WIDTH."
                         (format #t (format #f " ~~~da ~~a" (+ width padding))
                                 field vborder)))
         (display-top     (lambda (widths)
                            "Display a top horisontal table border."
                            (display top-left)
                            (let loop ((w widths))
                              (unless (null? w)
                                (let ((row-width (+ (car w) padding 2)))
                                  (display (string-join (make-list row-width
                                                                   top)
                                                        ""))
                                  (unless (null? (cdr w))
                                    (display top-joint)))
                                (loop (cdr w))))
                            (display top-right)
                            (newline)))
         (display-bottom  (lambda (widths)
                            "Display a top horisontal table border."
                            (display bottom-left)
                            (let loop ((w widths))
                              (unless (null? w)
                                (let ((row-width (+ (car w) padding 2)))
                                  (display (string-join (make-list row-width
                                                                   bottom)
                                                        ""))
                                  (unless (null? (cdr w))
                                    (display bottom-joint)))
                                (loop (cdr w))))
                            (display bottom-right)
                            (newline)))
         (display-hborder (lambda (widths)
                            "Display a top horisontal table border."
                            (display horizontal-left)
                            (let loop ((w widths))
                              (unless (null? w)
                                (let ((row-width (+ (car w) padding 2)))
                                  (display (string-join (make-list row-width
                                                                   hborder)
                                                        ""))
                                  (unless (null? (cdr w))
                                    (display horizontal-joint)))
                                (loop (cdr w))))
                            (display horizontal-right)
                            (newline))))
    (display-top width)
    (let loop ((t table))
      (unless (null? t)
        (display vborder)
        (for-each format-field (car t) width)
        (newline)
        (when hborder
          (if (null? (cdr t))
              (display-bottom width)
              (display-hborder width)))
        (loop (cdr t))))))

(define (shorthand->table-parameter sh)
  "Convert a shorthand SH to a table parameter."
  (assoc-ref %table-parameters sh))

(define (borders->alist borders)
  "Convert BORDERS spec to an alist."
  (if (not (string-null? borders))
      (map (lambda (s)
             (let ((lst (string-split s #\=)))
               (cons (shorthand->table-parameter (string->symbol (car lst)))
                     (cadr lst))))
           (car (dsv-string->scm borders #\,)))
      '()))

(define (print-file input-port fmt borders delim)
  "Pretty-print a FILE."
  (let ((delim (or delim (guess-file-delimiter input-port fmt))))

    (unless delim
      (error "Could not determine a file delimiter" input-port))

    (let ((table (remove-empty-rows (dsv->scm input-port delim #:format fmt)))
          (bspec (borders->alist borders)))
      (format-table table bspec))))


(define (print-summary input-port fmt delim)
  "Print summary information for an INPUT-PORT of format FMT."
  (let ((guessed-delim (or delim (guess-file-delimiter input-port fmt)))
        (f             (cut format #t <...>)))

    (f "File:      ~a~%" (or (port-filename input-port)
                             ""))
    (f "Format:    ~a~%" fmt)
    (f "Delimiter: '~a'~a~%"
       (or guessed-delim "")
       (if guessed-delim
           (format #f " (0x~x)" (char->integer guessed-delim))
           ""))

    (when guessed-delim
      (let* ((table  (remove-empty-rows
                      (dsv->scm input-port guessed-delim
                                #:format fmt)))
             (wtable (let loop ((w   (get-width table))
                                (col 1)
                                (res '()))
                       (if (not (null? w))
                           (loop (cdr w)
                                 (1+ col)
                                 (cons (list (number->string col)
                                             (number->string (car w)))
                                       res))
                           (reverse res)))))
        (f "Records:   ~a~%" (length table))
        (newline)
        (format-table (cons '("column" "width") wtable) '())))))

(define (convert input-port source-delim target-delim source-format target-format)
  "Convert a data from an INPUT-PORT from a SOURCE-FORMAT to a TARGET-FORMAT."
  (case target-format
    ((unix rfc4180)
     (let ((source-delim (or source-delim
                             (guess-file-delimiter input-port source-format)))
           (target-delim (or target-delim 'default)))
       (unless source-delim
         (error "Could not determine a file delimiter" input-port))
       (let ((table (remove-empty-rows (dsv->scm input-port source-delim
                                                 #:format source-format))))
         (scm->dsv table (current-output-port) target-delim
                   #:format target-format))))
    (else
     (error "Unsupported target format" target-format))))

(define (print-delimiter input-port fmt)
  "Guess and print FILE delimiter."
  (let ((guessed-delim (guess-file-delimiter input-port fmt)))
    (format #t "~a~%" (or guessed-delim ""))))

(define (print-help-and-exit)
    (display "\
Usage: dsv [options] <file>

The default behaviour of the program is to print a formatted table from a
<file> to stdout.  The options listed below can be used to change or modify
this behaviour.

Options:
  --help, -h                 Print this message and exit.
  --summary, -s              Print summary information for a file.
  --delimiter, -D <delim>    Set a delimiter.
  --guess-delimiter, -d      Guess a file delimiter and print the result.
  --file-format, -F <fmt>    Set a file format.  Possible formats are:
                             \"unix\" (default), \"rfc4180\"
  --table-borders, -b <spec> Set table borders for printing.  The value can be
                             either a borders specification or a preset name.

                             Spec is expected to be a comma-separated list of
                             key=value pairs, where possible keys are:
                               - \"t\"         (top)
                               - \"tl\"        (top-left)
                               - \"tr\"        (top-right)
                               - \"tj\"        (top-joint)
                               - \"h\"         (horizontal)
                               - \"hl\"        (horizontal-left)
                               - \"hr\"        (horizontal-right)
                               - \"hj\", \"j\"   (horizontal-joint)
                               - \"v\"         (vertical)
                               - \"b\"         (bottom)
                               - \"bl\"        (bottom-left)
                               - \"br\"        (bottom-right)
                               - \"bj\"        (bottom-joint)

                             Example values:
                               - \"v=|,h=-,j=+\"

  --to, -t <fmt>             Convert a file to a specified format, write
                             the result to stdout.
  --to-delimiter, -T <delim> Convert delimiters to the specified variant.
                             When this option is not used, default delimiters
                             for the chosen output format will be used.
  --debug                    Enable state machine debugging.
")
  (exit))

(define (main args)
  (let* ((option-spec '((help            (single-char #\h) (value #f))
                        (summary         (single-char #\s) (value #f))
                        (delimiter       (single-char #\D) (value #t))
                        (to-delimiter    (single-char #\T) (value #t))
                        (file-format     (single-char #\F) (value #t))
                        (table-borders   (single-char #\b) (value #t))
                        (guess-delimiter (single-char #\d) (value #f))
                        (to              (single-char #\t) (value #t))
                        (debug                             (value #f))))
         (options (getopt-long args option-spec))
         ;; Options
         (help-needed?      (option-ref options 'help            #f))
         (summary-needed?   (option-ref options 'summary         #f))
         (guess-delimiter?  (option-ref options 'guess-delimiter #f))
         (file-format       (option-ref options 'file-format     "unix"))
         (delimiter         (and=> (option-ref options 'delimiter #f)
                                   (cut string-ref <> 0)))
         (to-delimiter      (and=> (option-ref options 'to-delimiter #f)
                                   (cut string-ref <> 0)))
         (table-borders     (option-ref options 'table-borders   ""))
         (to                (option-ref options 'to              #f))
         (debug?            (option-ref options 'debug           #f))
         (args              (option-ref options '()              #f)))

    (set-debug! debug?)

    (when help-needed?
      (print-help-and-exit))

    (let ((input-port (if (null? args)
                          (current-input-port)
                          (open-input-file (car args)))))
      (cond
       (summary-needed?
        (print-summary input-port (string->dsv-format file-format) delimiter))
       (guess-delimiter?
        (print-delimiter input-port (string->dsv-format file-format)))
       (to
        (convert input-port
                 delimiter
                 to-delimiter
                 (string->dsv-format file-format)
                 (string->symbol to)))
       (else
        (print-file input-port
                    (string->dsv-format file-format) table-borders
                    delimiter)))

      (close input-port))
    (exit)))


;;;

;; Local Variables:
;; mode: Scheme
;; End:

;;; dsv.in ends here
